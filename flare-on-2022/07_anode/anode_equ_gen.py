#!/usr/bin/env python3
# ----------------------------------------------------------------------------------------
# FLARE-ON 2022: 7 - anode
# ----------------------------------------------------------------------------------------
import os
import re
import textwrap


# ----------------------------------------------------------------------------------------
def patch_equations(contents):
    """Patches equations with console.log statements"""
    print('[+] Patching case statements ...')

    # Find the beginning and the end of the switch statement
    begin = contents.find(b'var state = 1337;')
    end = contents.find(b'var target = [106, 196,')

    cnt = 0
    new_switch = b''
    equ_map = {}

    # Iterate over each line.
    for line in contents[begin:end].split(b'\n'):
        if re.search(r'b\[[0-9]+\] .= (\()?b\[[0-9]+\]', line.decode('utf-8')):
            # We have a match!        
            if b'Math.random()' in line:
                # Always invoke random() to not lose track of the PRNG
                log = (b'console.log("stmt #%05d ~> " + '
                       b'Math.floor(Math.random() * 256));' % cnt)
            else:
                log = b'console.log("stmt #%05d");' % cnt
            
            equ_map[cnt] = line

            # Pad line with whitespaces to ensure total size is the same.
            line = log + b' '*(len(line) - len(log))
            cnt += 1
        
        # We add the line to the new contents regardless of the match.
        new_switch += line + b'\n'

    new_switch = new_switch[:-1]  # Drop the last '\n'

    new_contents = contents[:begin] + new_switch + contents[end:]

    print(f'[+] Done. {cnt} statements patched.')

    return new_contents, equ_map
    

# ----------------------------------------------------------------------------------------
if __name__ == "__main__":
    print('[+] Anode equation generator script started.')

    with open('anode.exe', 'rb') as fp:
        contents = fp.read()

    patched_contents, equ_map = patch_equations(contents)

    # Script has 2 modes of operation:
    if not os.path.isfile('trace.txt'):
        print('[+] Trace file not exists. Saving patched anode.exe and exiting.')
        print('[+] Please run program and dump output into `trace.txt`.')
        with open('anode.patched.exe', 'wb') as fp:
            fp.write(patched_contents)
    else:
        print('[+] `trace.txt` found. Inverting equations ...')
        with open('trace.txt', 'r') as fp:
            trace_lines = fp.readlines()

        # Extract statement order.
        order = []
        for line in trace_lines:
            if match := re.match(r'stmt #([0-9]+) ~> ([0-9]+)', line):
               order.append((int(match.group(1)), int(match.group(2))))

            elif match := re.match(r'stmt #([0-9]+)', line):
               order.append((int(match.group(1)), 0))

        # Reverse the equations.
        inv_equ = []
        for idx, rnd_num in order:
            equ = equ_map[idx].decode('utf-8').strip().replace(
                        'Math.floor(Math.random() * 256)', str(rnd_num))
            
            # XOR is XOR (no action). Invert + and - signs.
            if equ.find('+=') != -1:
                equ = equ.replace('+=', '-=')
            elif equ.find('-=') != -1:
                equ = equ.replace('-=', '+=')

            print(f'[+] Inverted Equation: {equ}')  
            
            inv_equ.append(equ)

        # Synthesize script. Add banner first
        equ_script = textwrap.dedent("""
            #!/usr/bin/env python3
            #                
            # FLARE-ON 2022: 7 - anode
            #
            # This script has been automatically generated by anode_equ_gen.py
            b = [
                106, 196, 106, 178, 174, 102, 31,  91,  66,  255,
                86,  196, 74,  139, 219, 166, 106, 4,   211, 68,
                227, 72,  156, 38,  239, 153, 223, 225, 73,  171,
                51,  4,   234, 50,  207, 82,  18,  111, 180, 212,
                81, 189, 73, 76
            ]
        """).strip()
        equ_script += '\n\n'

        for equ in inv_equ[::-1]:
            if match := re.match(r'^b\[([0-9]+)\] ', equ):
                b =  match.group(1)
            else:
                raise Exception(b'Malformed equation: {equ}')

            equ_script += f'{equ} b[{b}] &= 0xFF;\n'

        equ_script += '\nprint(f"Flag is: {\'\'.join([chr(a) for a in b])}")\n'
        
        with open('reversed_equations_auto_gen.py', 'w') as fp:
            fp.write(equ_script)

        print('[+] reversed_equations_auto_gen.py generated successfully.')
    
    print('[+] Program finished! Bye bye :)')

# ----------------------------------------------------------------------------------------
'''
ispo@localhost:~/ctf/flare-on-challenges/flare-on-2022/07_anode$ ./anode_equ_gen.py 
[+] Anode equation generator script started.
[+] Patching case statements ...
[+] Done. 2048 statements patched.
[+] Trace file not exists. Saving patched anode.exe and exiting.
[+] Please run program and dump output into `trace.txt`.
[+] Program finished! Bye bye :)

ispo@localhost:~/ctf/flare-on-challenges/flare-on-2022/07_anode$ ./anode_equ_gen.py 
[+] Anode equation generator script started.
[+] Patching case statements ...
[+] Done. 2048 statements patched.
[+] `trace.txt` found. Inverting equations ...
[+] Inverted Equation: b[29] += b[37] + b[23] + b[22] + b[24] + b[26] + b[10] + 7;
[+] Inverted Equation: b[39] -= b[34] + b[2] + b[1] + b[43] + b[20] + b[9] + 79;
[+] Inverted Equation: b[19] ^= (b[26] + b[0] + b[40] + b[37] + b[23] + b[32] + 255) & 0xFF;
[+] Inverted Equation: b[28] ^= (b[1] + b[23] + b[37] + b[31] + b[43] + b[42] + 245) & 0xFF;
[..... TRUNCATED FOR BREVITY .....]
[+] Inverted Equation: b[21] -= b[39] + b[6] + b[0] + b[33] + b[8] + b[40] + 179;
[+] Inverted Equation: b[34] -= b[35] + b[40] + b[13] + b[41] + b[23] + b[25] + 14;
[+] Inverted Equation: b[22] -= b[16] + b[18] + b[7] + b[23] + b[1] + b[27] + 50;
[+] Inverted Equation: b[39] -= b[18] + b[16] + b[8] + b[19] + b[5] + b[23] + 36;
[+] reversed_equations_auto_gen.py generated successfully.
[+] Program finished! Bye bye :)

ispo@localhost:~/ctf/flare-on-challenges/flare-on-2022/07_anode$ ./reversed_equations_auto_gen.py 
Flag is: n0t_ju5t_A_j4vaSCriP7_ch4l1eng3@flare-on.com
'''
# ----------------------------------------------------------------------------------------
